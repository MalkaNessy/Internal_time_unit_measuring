/*## начало цитаты ##
Если я правильно понимаю, то человеку надо переписать функцию start_test как-то так:
    //после нажатия на пункт меню "Начать тест"...
    function start_test(){
        TestParams.error = 0; //количество сделанных ошибок
        TestParams.max_errors = 5; //количество максимально допустимых ошибок
        count = 1; //количество сделанных проходов теста
        var x = document.getElementById("myAudio");
   x.play();
   setTimeout(function(){
     x.pause();
     x.currentTime=0;
   },0);
        click_test();
    }

Ну в и остальное, связанное с началом писка добавить play pause на клик. Это решит проблему работы в Android и iOS.


setTimeout и setInterval не гарантируют соблюдения временных промежутков.
Если нужна большая точность, то лучше использовать requestAnimationFrame
https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
Это будет точнее в каком-то смысле.

Плюс, для того чтоб избежать проблем с выгрузкой-загрузкой звука из памяти, что тоже приводит к задержкам, т.к. браузер постоянно запрашивает сервер, звук должен быть оптимизирован по размеру (файл должен быть как можно меньше) и надо не грузить его каждый раз, а использовать все тот же элемент.
Как оптимизировать размер файла можно посмотреть здесь:
https://askubuntu.com/questions/184747/how-can-i-compress-an-mp3-file
Хотя может этого и не обязательно делать, т.к. звуки у тебя маленькие.

Чтоб не грузить звуки, создай Howl'ом все звуки заранее и, когда надо, воспроизводи 
нужный.

Еще одна проблема есть в iOS. Там может быть запущен только один плеер в одно время. 
Но, как я вижу в исходниках, Howler знает, что с этим делать. Так что, проблемы быть
 не должно. Смотри документацию по Howler'у:
https://github.com/goldfire/howler.js
Тебе надо создать один sound
    var sound = new Howl({
      src: ['beep100.mp3', 'beep100high.mp3']
    });
И потом проигрывать как:
sound.play(0);
и
sound.play(1);
В документации также есть рекомендация использовать webm.
Учитывая размер звука, возможно даже стоит вообще отказаться от дополнительных 
файлов, а использовать base64 кодированный звук 
(data:audio/webm;base64,base64 encoded file content). Это тоже ускорит работу.

Т.е. надо создать звуки, при нажатии на кнопку устанавливать какой-то флаг и вводить
 время, когда должно воспроизводиться, в requestAnimationFrame проверять флаг и если
 текущее время больше или равно нужному - играть нужный звук и сбрасывать флаг.
Это должно помочь.
*/
	